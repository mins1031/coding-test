import sys

sys.stdin = open("in_out/chapter4/in5.txt", "rt")


def dfs(L, sum):
    if L==n:
        if sum==(total-sum):
            print("YES")
            sys.exit(0)
    else:
        dfs(L+1, sum+a[L])
        dfs(L+1, sum)

if __name__ == "__main__":
    n = int(input())
    a = list(map(int, input().split()))
    total = sum(a)
    dfs(0, 0)
    print("NO")

'''
부분집합을 둘로 나눠 둘의 합이 같은경우를 구하는 문제이다
사실 부분집합을 어떻게 둘로 나누지? 라는 생각으로 풀이를 거의 못했던 문제이다.
풀이의 초점은 집합을 둘로 나누는게 아닌 합에 초점을 맞췄다.
사실 나는 처음에 집합을 둘로 나누고 그 다음에 합을 구하는 거에 포커스가 맞춰져 그쪽으로만 생각을 하고 있었다.
풀이에서는 합에 초점을 맞춰 모든 트리를 돌며 합을 구한다. 이후에 전체 합 - sum == sum의 공식으로 합의 동일유무를 확인한다.
이건 지금까지의 집합 이외의 값은 모두 선택되지 않은 제2의 집합이고 전체 값에서 1의 집합의 총합을 뺸값과 1의 집합 총합이 같다면 1집합 총합 == 2집합 총합 이되는 원리이다.
결국 모든 트리를 돌며 선택이면 총합에 더하고 아니면 더하지 않고 반복하는 로직으로 구현되었다.
'''